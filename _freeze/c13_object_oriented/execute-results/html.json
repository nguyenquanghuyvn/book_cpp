{
  "hash": "ee013ef9703766fbcb13ec21448594f8",
  "result": {
    "markdown": "---\ntitle: \"Basic Object-oriented Programming\"\n---\n\n\nIn C++, object is a piece of memory to store values. An named object is a variable.\n\nObject-oriented programming (OOP) provides us with the ability to create objects that tie together both **properties**(e.g. color, weight, size, shape, etc...) and **behaviors** (e.g. being opened, make something else hot, etc...).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyou.driveTo(work);\n```\n:::\n\n\nThis is not only read more clearly, it also make it clearer who is the subject and what behavior. This makes the program to be written in a more *modular fashion*.\n\nObjects in OOP include normal definition and combines both properties and behaviors.\n\n## Classes and class members\n \n The `struct` data type only contains data, not the other behavior or properties. In OOP, we have **class**: it is similar to `struct`, but **having the functions** that work with the data as well.\n \n Here is code to define **class**:\n \n\n::: {.cell}\n\n```{.r .cell-code}\nstruct DateStruct {\n\tint year{};\n\tint month{};\n\tint day{};\n};\n\nclass DateClass {\npublic:\n\tint m_year{};\n\tint m_month{};\n\tint m_day{};\n};\n\nint main()\n{\n\n\treturn 0;\n}\n```\n:::\n\n \n \nClass definition is a *blueprint*, it does not actually create the object. To actually create an object of the class, a variable of that class **must** by defined: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nDateClass today{ 2020, 10, 14 };\n```\n:::\n\n\n### Member functions\n\nFunctions defined inside of a class are **member function** or **methods**. Member function can be defined inside our outside of the class definition.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass DateClass {\npublic:\n\tint m_year{};\n\tint m_month{};\n\tint m_day{};\n\n\tvoid print()\n\t{\n\t\tstd::cout << m_year << '/' << m_month << '/' << m_day << '\\n';\n\t}\n};\n\nclass Employee\n{\npublic:\n\tstd::string m_name{};\n\tint m_id{};\n\tdouble m_wage{};\n\n\tvoid print()\n\t{\n\t\tstd::cout\n\t\t\t<< \"Name: \" << m_name\n\t\t\t<< \"; Id: \" << m_id\n\t\t\t<< \"; Wage \" << m_wage << '\\n';\n\t}\n};\n```\n:::\n\n\nMember function can call function that defined after it in the class (normal function requires forward declaration).\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}