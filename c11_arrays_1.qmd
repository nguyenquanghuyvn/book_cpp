---
title: "Arrays (Part 1)"
---

:::{.callout-note}

This chapter is a bit harder than the previous ones. If you feel a little discouraged, stick with it. The best stuff is yet to come!

:::

An **array** is an aggregate data type that we can access many variables of the same type through a **single** object.

This is an example definition of **fixed array** (fixed length/size): `int test_score[30]{};`.

Each variables in an array is called **element** which does not their unique name.
We access the element by giving use **subscript operator ([])** and its **index** start from `0`.

Here is an example:

```{r}
#| label: array-prime

#include <iostream>

int main()
{
	int prime[5]{};
	prime[0] = 2;
	prime[1] = 3;
	prime[2] = 5;
	prime[3] = 7;
	prime[4] = 11;

	std::cout << "The lowest prime number is: " << prime[0] << '\n';
	std::cout << "The sum of the first 3 primes is: " << prime[0] + prime[1] + prime[2] << '\n';
	
	return 0;
}
```

Array can made from **any** data type.

```{r}
#| label: array-data-type

struct Rectangle
{
	int length{};
	int width{};
};

	double battery_life_hour[3]{};
	battery_life_hour[0] = 2.0;
	battery_life_hour[1] = 3.0;
	battery_life_hour[2] = 4.3;

	Rectangle rects[2]{};
	rects[0].length = 24;
	rects[0].width = 10;
	
	rects[1].length = 30;
	rects[1].width = 20;

```

#### Array subscripts

We can use the following ways for array's index

```{r}
#| label: indexing

	int array[5]{};

	enum Animals
	{
		animal_cat = 2,
	};

	array[animal_cat] = 2;

	int index{ 3 };
	array[index] = 4;

	array[1 + 2] = 5;
```

#### Fixed-array declaration

The array's length must be a compile-time constant, known at compile-time:

```{r}
#| label: array_declaration

	int number_days_in_week[7]{};

	constexpr int days_per_week{ 7 };
	int numbers_day_in_week_2[days_per_week]{};

	enum DaysOfWeek
	{
		monday,
		tuesday,
		wednesday,
		thursday,
		friday,
		saturday,
		sunday,

		maxDaysOfWeek
	};
	int numberOfLessonsPerDay[maxDaysOfWeek]{};
```

But, we cannot use the following ways:

```{r}
#| label: array_declaration_error

# using a non-const variable
int daysPerWeek{};
std::cin >> daysPerWeek;
int numberOfLessonsPerDay[daysPerWeek]{}; #!!! Not ok -- daysPerWeek is not a compile-time constant!

// using a runtime const variable
int temp{ 5 };
const int daysPerWeek{ temp }; #!!! the value of daysPerWeek isn't known until runtime, so this is a runtime constant, not a compile-time constant!

int numberOfLessonsPerDay[daysPerWeek]{}; #!!! Not ok
```

#### Enum and array

We use data type `enum` as the array's length. This helps us have meaning full variable name instead of **magic numbers**.

```{r}
#| label: enum-array

#include <iostream>

#' We put it in  a namespace
namespace student_names
{
	enum Student_names
	{
		kenny,
		kyle,
		stan,
		butters,
		cartman,
		wendy,

		max_students
	};
}

int main()
{
	int test_scores[student_names::max_students]{};
	test_scores[student_names::stan] = 76;

	return 0;
}
```

#### Passing array to functions

C++ **does not copy** an array passed to a function. Instead, an actual array is passed => function can change array's elements.

If we do not that function change array, we put an array as const: `const int array[5]`.

```{r}
#| label: pass_array

void pass_array(int array[2])
{
	array[0] = 2;
	array[1] = 5;
}

int main()
{
	int test_scores[student_names::max_students]{};
	test_scores[student_names::stan] = 76;

	// Pass array to function
	int array[2]{ 1, 2 };

	std::cout << "Before pass: ";
	for (int i = 0; i <=  1; i++)
	{
		std::cout << array[i] << ' ';
	}

	pass_array(array);
	std::cout << "\nAfter pass: ";
	for (int i = 0; i <= 1; i++)
	{
		std::cout << array[i] << ' ';
	}

	return 0;
}
```

#### Size of array

We use `std::size()` to get the length of array (number of its elements). 

`std::size()` will get error if we want to use it in a fixed array that passed to a function:

```{r}
#| label: std::size

void somefunc(int* array) #// Later, actually, array is pass to address
{
    std::size(array) #!!! compile error.
}

int main()
{
    int array[]{1, 2, 3};
    
    std::cout << "Array's length: " << std::size(array) << '\n'; #\\ okie
    

    
}
```

Other function is `sizeof()`, but this returns to whole size of array (elements * size per elements).

## Loop and arrays

We can always use array with loop

```{r}
#| label: array_loop

#include <iostream>
#include <iterator>

int main()
{
	constexpr int scores[]{ 84, 92, 76, 81, 56 };
	constexpr int number_students{ static_cast<int>(std::size(scores)) };

	int total_scores{ 0 };

	for (int i = 0; i < number_students; i++)
	{
		total_scores += scores[i];
	}

	auto average_scores{ static_cast<double>(total_scores) / number_students };

	return 0;
}
```

An example that use loop to find the max in an array:

```{r}
#| label: array-find-max

	int max_scores{ 0 };

	for ( int i = 0; i < number_students; i++)
	{
		if (scores[i] > max_scores)
			max_scores = scores[i];
	}

	std::cout << "The best score was " << max_scores << '\n';
```

Here is from exercise:

```{r}
#| label: array_exercise

#include <iostream>
#include <iterator>
#include <random>

// Create random generators

std::mt19937 mt{ std::random_device{}() };
std::uniform_int_distribution array10{ 1, 9 };

void get_array(int array[10])
{
	for (int counter{ 0 }; counter < 10; ++counter)
	{
		array[counter] = array10(mt);
	}
}

void print(int array[10])
{
	for (int counter = 0; counter < 10; counter++)
	{
		std::cout << array[counter] << ' ';
	}

	std::cout << '\n';
}
int get_index()
{
	while (true)
	{
		std::cout << "Enter an integer between 1 and 9: ";
		int index{};
		std::cin >> index;
		if (std::cin.fail())
		{
			std::cin.clear();
			std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
		}
		else
			return index;
	}
}

int search_index(int array[10], int number)
{
	for (int index{ 0 }; index < 10; ++index)
	{
		if (number == array[index])
			return index;
	}

	std::cout << "There does not exit  your number in our array.\n";
}

int main()
{
	
	int array[10]{ 4, 6, 7, 3, 8, 2, 1, 9, 5 };
	//get_array(array);
	print(array);
	
	int number{ get_index() };

	//std::cout << "The index " << index << " has number " << array[index] << '\n';
	
std::cout << "The number " << number << " has index ";
	std::cout << search_index(array, number) << '\n';

	return 0;
}
```

## Sorting an array using selection sort

In this session, we can use the function `std::swap()` from header `utility` to swap the positions of two variables.

### Selection sort

This is the easy method, but lowest one:

1. Starting at array index 0, search the entire array to find the smallest value
2. Swap the smallest value found in a array with the value at index 0
3. Repeat step 1 and 2 starting from the next index

Here is an example selection sorting:

```{r}
#| label: sort_selection

#include <iostream>
#include <iterator>
#include <utility>
#include <random>

void sort(int array[], int length)
{
	for (int start_index{ 0 }; start_index < length; ++start_index)
	{
		int smallest_index{ start_index };

		for (int current_index{ start_index + 1 }; current_index < length; ++current_index)
		{
			if (array[current_index] < array[smallest_index])
				smallest_index = current_index;
		}

		std::swap(array[start_index], array[smallest_index]);
	}
}

void print(int array[], int length)
{
	for (int index{ 0 }; index < length; ++index)
	{
		std::cout << array[index] << ' ';
	}

	std::cout << '\n';
}

void random_array(int array[], int length)
{
	std::mt19937 mt{ std::random_device{}() };

	std::uniform_int_distribution value{ 1, 100 };

	for (int index{ 0 }; index < length; ++index)
	{
		array[index] = value(mt);
	}
}

int main()
{
	int array[20]{};
	constexpr int length{ static_cast<int>(std::size(array)) };

	random_array(array, length);
	std::cout << "Array before sorting: \n";
	print(array, length);

	sort(array, length);
	std::cout << "Array after sorting: \n";
	print(array, length);
}
```

Here is an example of bubble sorting:

```{r}
#| label: bubble-sorting

template <typename T>
void sort_bubble(T array[], int length)
{
	for (int start_index{ 0 }; start_index < length - 1; ++start_index)
	{
		int count_swap{ 0 };
		for (int index{ 0 }; index < length - start_index - 1; ++index)
		{
			if (array[index] > array[index + 1])
			{
				std::swap(array[index], array[index + 1]);
				++count_swap;
			}
		}

		if (count_swap == 0)
		{
			std::cout << "\nEarly termination on interation " << start_index << '\n';
			break;
		}
	}
}
```

### std::sort

We can use `std::sort` from the `algorithm` header.

## Multidimensional Arrays

An array can include any data type, even an **array** too. We can create a multidimensional array:

```{r}
#| label: multi_dim_array

	int array[3][5]
	{
		{1, 2, 3, 4, 5 },
		{6, 7, 8, 9, 10},
		{11, 12, 13, 14, 15},
	};
```

We can ommit the left-most length, but not the rightmost; we can use zero initializer:

```{r}
#| label: omit-leftmost

	int array2[][3]
	{
		{1, 2, 3},
		{4, 5, 6},
	}

	// Zero initializer
	int array3[3][3]{};

```

Print array:

```{r}
#| label: print-array

template <typename T>
void print(T array[][3])
{
	for (int row{ 0 }; row < 2; ++row)
	{
		for (int column{ 0 }; column < 3; ++column)
		{
			std::cout << array[row][column] << ' ';
		}

		std::cout << '\n';
	}
}
```

## C-style string

A **C-style string** is simply an array of characters that uses **null terminator** `\0`.

This is an example of C-Style string:

```{r}
#| label: c-style-string

#include <iostream>
#include <iterator>

int main()
{
	char myString[]{ "string" };
	const int length{ static_cast<int>(std::size(myString)) };

	std::cout << myString << " has " << length << " characters.\n";

	return 0;
}

```

`std::cout` only print the string until encountering `\0`, the rest of array are ignored.

```{r}
#| label: print-string

int main()
{
    char name[20]{ "Alex" }; // only use 5 characters (4 letters + null terminator)
    std::cout << "My name is: " << name << '\n';

    return 0;
}

#> Alex
```

:::{.callout-tip}

Do not use C-style string. Use `std::string` or `std::string_view`.

:::

#### C-style strings and `std::cin`

Some cases that we do not know in advance how long our string is going to be. To cope with this, we use the code `getline(name, std::size(name))`. 

For example:

```{r std_cin}

#include <iostream>
#include <iterator> // for std::size

int main()
{
    char name[255] {}; // declare array large enough to hold 254 characters + null terminator
    std::cout << "Enter your name: ";
    std::cin.getline(name, std::size(name));
    std::cout << "You entered: " << name << '\n';

    return 0;
}

```

## `std::string_view` (part 2)

`std::string` make a copy for the string created:

```{r}
#| label: string_copy

int main()
{

	char text[]{ "Hello" };
	std::string str{ text };
	std::string more{ str };



	return 0;
}
```

In the above example, there are 4 copies `Hello`. First, the literal string store in the binary as the compile-time. Second is when we create `char[]` and the other two from `std::string`.

The `std::string_view` provides a *view* of a string defined elsewhere: it does not copy the string.

```{r}
#| label: string_view
    
    using namespace std::literals # using the prefix `sv`    

	const char text[]{ "Hello" };
	std::string_view str{ text };
	std::string_view more{ str };
	
	auto str2{"Hello" sv};
	
```

There are useful operations (functions) to use for `string_view` that can be found at <https://en.cppreference.com/w/cpp/string/basic_string_view>.

```{r}
#| label: string_view_operation

	auto str2{ "Today is sunny"sv };

	std::cout << str2.length() << '\n';
	std::cout << std::boolalpha;
	std::cout
		<< str2.starts_with("Today") << '\n'
		<< str2.starts_with("Yesterday") << '\n'
		<< str2.substr(0, str2.find(' ')) << '\n';
```

Notice that if we change the `text`, then the string_view `str` changes too.

#### `std::string_view` works with non-null-terminated strings

`std::string_view` does not use null terminators to mark the end of the string. It keeps track of its length to know the string ends.

```{r}
#| label: non-null-terminator

	char vowel[]{ 'a', 'e', 'i', 'o', 'u' };
	std::string_view str3{ vowel, std::size(vowel) };

	std::cout << str3 << '\n';
```

### Why are `std::string_view` parameters more efficient than `const std::string&`?

The figure below summaries our answer:

```{r}
#| label: std_view_paras
#| fig-cap: std:string_view parameter vs const std::string& parameter

include.graphic
```

We can use `str.data()` to access the string that is viewed. This function return a C-style string.

As I understand, when we create a string_view object, the viewed object is as `C-style string` (literal initializer) or `std::string` with null terminator. It is fine to use `data()` to point to the first character of viewed object. But, when we use `str.remove_suffix()`, it remove null terminator. The use of `data()` results undefined behavior.

## Array and pointer

When a fixed array is used as an **expression**, it will **decay** into a pointer that points to the first element of the array.

But array and pointer are **not** identical. Array is of type `int[]`, pointer is of type `int*`. 

We can access the array's element value through the pointer. 

```{r}
#| label: array_pointer

#include <iostream>

int main()
{
	int array[5]{ 1, 2, 3, 4, 5 };

	std::cout 
		<< "First element of array has address: " 
		<< &array[0] 
		<< '\n';

	std::cout
		<< "The array decays to a pointer holding address: "
		<< array	// array as an expression
		<< '\n';

	# Access element's value by pointer
	std::cout << *array << '\n';

	return 0;
}
```

We can assign a pointer to point at the array:
```{r}
#| label: pointer_to_array
    int array[5]{ 1, 2, 3, 4, 5 };
	int* ptr{ array };  # point to the first element
```

Array and pointer have some differences:

* The fixed array knows how long the array it is pointing to is. A pointer to the array does not.
* Taking the address of a pointer yields the memory address of the pointer variable. Of an array return pointer to the entire array.
    * Type of `&array` is `int(*)[]`
    
#### Revisiting passing fixed arrays to functions

When passing an array as an argument to a function, a fixed array **decays into a pointer**, and the pointer is passed to the function:

```{r}
#| label: passing-array-to-pointer

void print_size(int* array)
{
	std::cout << sizeof(array) << '\n';
}
#// the size of a pointer, not an array

#// If the parameter is int array, C++ implicitly converses to pointer
```

The two functions are the same: `void print_size(int* array)` and `void print_size(int array[])`.

## Pointer arithmetic and array indexing

### Pointer arithmetic

If `ptr` points to an integer, then `ptr + 1` is the address of the next integer in memory after `ptr`; similar to `ptr - 1`.

`ptr + 1` does not return to *memory address* after `ptr`, but the memory address of *next object of the type* the `ptr` points to.

```{r pointer_arithmetic}

#include <iostream>

int main()
{
	int value{ 7 };
	int* ptr{ &value };

	std::cout
		<< ptr << '\n'
		<< ptr + 1 << '\n'
		<< ptr + 2 << '\n'
		<< ptr + 3 << '\n';

	return 0;
}
```

Array's elements are in sequence in memory. We know that fixed array return a pointer to an address of first element. Thus, adding 1 to an array `array + 1`, should point to the second element of the array.

Let look at the following code:

```{r}
#| label: array-pointer-arithmetic

bool is_vowel(char ch)
{
	switch (ch)
	{
	case 'A':
	case'a':
	case 'E':
	case 'e':
	case 'I':
	case 'i':
	case 'O':
	case 'o':
	case 'U':
	case 'u':
		return true;
	default:
		return false;
	}
}

int main()
{
	char name[]{ "Phuong" };
	int array_length{ static_cast<int>(std::size(name)) };
	int number_vowel{ 0 };

	for (char* ptr{ name }; ptr != (name + array_length); ++ptr)
	{
		if (is_vowel(*ptr))
		{

			++number_vowel;
		}
	}

	std::cout << name << " has " << number_vowel_func(name) << " vowels.\n";

	return 0;
}
```

We can use `std::count_if` from `algorithm` header:

```{r count_if}

# use the function std::count_if from algorithm header
auto number_vowel_std{ std::count_if(std::begin(name), std::end(name), is_vowel) };
std::cout << name << " has " << number_vowel_std << " vowels.\n";

```

## Dynamic memory allocation with new and delete

**Static variable** and **local variable** has static allocation and auto allocation respectively. These allocation is on the **stack** memory which is size limited. They also require that the compiler knows the size at their definition.

The allocations invoke some limitation in programing if we need the size change frequently or big size memory.

To solve that, C++ has **dynamic memory allocation**; it requests memory from the memory pool in system (**heap**) when it needs.

### Single variable's dynamic allocation

We use the keyword `new` to tell the program create a dynamic allocation. The computer returns a pointer to the address of the memory allocated.

We need to create a pointer to keep track of that memory.

To release the memory back to the computer we use `delete ptr`; this does not delete the `ptr`, so that pointer is dangling pointer and may cause undefined behavior. We can assign that pointer to `nullptr`, a null pointer.

Here is an example code:

```{r pointer-dynamic-var}

#include <iostream>

int main()
{
int* ptr{ new int };
*ptr = 7;
	
delete ptr;	
#' return the memory back to the computer, ptr is dangling pointer

std::cout << *ptr << '\n';  
delete ptr;	
#' try to deallocate the memory again lead to undefined behavior

return 0;
}

```

#### Operator `new` can fail

We can add `std::nothrow` between the `new` keyword and the allocation type such as `int* ptr{new (std::nothrow) int};`. Using this code, if the operator fail, it returns a null pointer.

#### Null pointer and dynamic allocation

Null pointer is very useful to work with dynamic memory allocation. It says "no memory has been allocated to this pointer". It allows us to do things like conditionally allocate memory

```{r}
#| label: null-pointer

if (!ptr)
    ptr = new int;
```

#### Memory leak

The pointer to a dynamic allocation memory is a normal variable so its scope follows the normal rule. The dynamic allocation object is only return to operate when we call `delete` keyword. There are some cases that the pointer to it goes out of scope without call `delete`. From that fact, our operate system still keep that memory for the program but we neither access it nor delete it because we do not know its address. We call it **memory leak**.

## Dynamic allocation arrays

We use the following code to create and delete dynamic allocation arrays:

```{r}
#| label: dynamic-allocation

#include <iostream>

int main()
{
	std::cout << "Enter a positive integer for array's length: ";
	int length{};
	std::cin >> length;

	int* array{ new int[length] {} };
	std::cout << "I just allocated an array of integers of length " << length << '\n';

	array[0] = 5;

	delete[] array;		 
    #//use array delete[] to deallocate array
	#// array is going out of scope inmmeidately after this anyway

	return 0;
}
```

Remember using `delete[]` not `delete`.

Dynamic array are almost identical to fixed arrays:

* It decays to pointer to the first element
* It does not know  its length or size (return from std::size is a pointer size; return from sizeof is pointer size * number of element).

Dynamic array allows us to set the array's length at the time of allocation, but C++ does not allow us to resize it.

To do this, we can use a resizable array called `std::vector`.

Here is the code for the exercise:

```{r}
#| label: exercise-array-dynamic

#include <iostream>
#include <string>
#include <algorithm>

auto get_number_name()
{
	std::cout << "How many names would you like to enter?: \n" << "Your repsonse: ";
	int number_name{};
	std::cin >> number_name;

	return number_name;
}

auto enter_name()
{
		std::string name{};
		std::getline(std::cin >> std::ws, name);
	
		return name;
}

void assign_array_value(std::string* array, int length)
{
	for (int index{ 0 }; index < length; ++index)
	{
		std::cout
			<< "Enter name #"
			<< index + 1
			<< " : ";
		std::getline(std::cin >> std::ws, array[index]);
	}
}

void print(std::string* array, int length)
{
	for (int index{ 0 }; index < length; ++index)
	{
		std::cout
			<< "Enter name #"
			<< index + 1
			<< " : "
			<< array[index]
			<< '\n';
	}
}

int main()
{
	int number_name{ get_number_name() };
	std::string* array_name{ new std::string[number_name]{} };

	std::cout << "\nPlease enter the names: \n";
	assign_array_value(array_name, number_name);

	std::sort(array_name, array_name + number_name);
	
	std::cout << "\nHere is your sorted list: \n";
	print(array_name, number_name);

	delete[] array_name;

	return 0;
}
```

## For-each loop
The *for-each* statement has the syntax:

```{r fpr-each-syntax}

for (element_statment: array)
    statement;

```

The loop will iterate through each element in array, assigning the value of the current array element to the variable declared in element_declaration:

```{r}
#| label: for_each_exam

constexpr int scores2[]{ 1, 2, 3, 4, 5 };

#// Print the array
for (int score : scores2)
{
	std::cout << score << ' ';
}

std::cout << '\n';
```

#### For-each loops and the `auto` keyword

The type of element_statement is the same type of array's element, so we can use the `auto` keyword.

```{r}
#| label: for_each_auto

constexpr int scores2[]{ 1, 2, 3, 4, 5 };

#// Print the array
for (auto score : scores2)
{
	std::cout << score << ' ';
}

std::cout << '\n';

```

#### for-each loops and references

In for-each loops, the statement_element copies the element's value. This is expensive. To avoid this, we can create the statement_element that **refer** to the array's element value

```{r}
#| label: for_each_reference

for (auto& score : scores2)
	{
		std::cout << score << ' ';
	}
```

We can also make it *constant*, if we just want to read only it.

:::{.callout-note}

To use for-each, the array:

* Not to be decayed to a pointer
* Have size information

:::

#### For-each and non-arrays

For-array can work with other types of data like vector

## Void pointer

We can create a void pointer that can point to any type of data. But the void pointer does not know the data type that it is pointing to, we cannot dereference it to get value.

If we want to dereference, we create another pointer which initialize by the cast the void pointer to the true type.

```{r}
#| label: void-pointer

#include <iostream>
#include <cassert>

int nValue{};
float fValue{};

struct Something
{
	int n;
	float f;
};


int main()
{
	void* ptr;

	Something sValue{0, 2.0};
	int value{ 5 };

	ptr = &nValue;	#// valid
	ptr = &fValue;	#// valid
	ptr = &sValue;	#// valid
	ptr = &value;

	std::cout << *ptr << '\n';	#// illegal: dereference of void pointer

	int* intPtr{ static_cast<int*>(ptr) };

	std::cout << *intPtr << '\n';	#// valid

	return 0;
}


```

This is impossible to do **pointer arithmetic** on void pointer because the pointer has to know what size object it is pointing to.

## An introduction to `std::array`

Build-in array has limitations:

* Decay to pointer when we pass it to a function's parameter, so it does known its size
* Problem of dealloation of dynamic allocation array

Thus, there is `std::array` in the `array` header. Here the code to create it:

```{r create_std::array}

#include <iostream>
#include <array>

int main()
{
	std::array<int, 5> array1{ 1, 2, 3, 4, 5 };
	std::array array2{ 1, 2, 3 };	// From C++17, allow to omit both type and length

	#// Use function `at()` or `[]` to access the array's element
	#// But at() does the boundary check to avoid out-of-bound program at runtime
	array2.at(1) = 3;	#// Equivalent to array2[1] = 3
}
    

```

We can use `at()` to access array's element. It is slower than `[]`, but is safer.

### Size and sorting

Use `myArray.size()` to get the array's size. The `std::array()` does not decay to pointer when we pass it to function, so we can use `size()` inside a called function.

```{r pass_function}

void print_length(const std::array<int, 5>& my_array) #// why have to put int, 5
{
	std::cout << "Length: " << my_array.size() << '\n';
}
```

:::{.callout-tip}

Always pass `std::array` object by reference or `const` reference to function's parameter

:::

### Passing `std::array` of different length to a function

We use the template for array type (`typename T`) and array size (`std::size_t`):

```{r array_template_function}

#include <array>
#include <cstddef>	// for std::size_t
#include <iostream>

//array_print() is a template function
template <typename T, std::size_t size>
void array_print(const std::array<T, size>& array)
{
	for (auto element : array)
		std::cout << element << ' ';
	
	std::cout << '\n';
}

int main()
{
	std::array my_array{ 9.0, 7.2, 3.6, 1.8 };
	array_print(my_array);

	std::array my_array2{ 1, 3, 4, 2, 6 , 5, 9 ,7 };
	array_print(my_array2);

	return 0;
}

```

With std::array, the element type and array length are part of type information, thus we have to specify them as a function parameter.

We use `template <typename T, std::size_t size>` to create a function work with `std::array`.

#### `size_t`

In `std::array`, the function `size()` and the operator`[]` return the object type `size_t`, thus we intitialize `std::size_t` in for loops.

```{r size_t_for_loop}

	#// Use std::array with for loops
	for (std::size_t index{ 0 }; index < my_array2.size(); ++index)
		std::cout << my_array2.at(index) << ' ';

```

### Array of struct

We can have a `std::array` of struct:

```{r array_struct}

truct House
{
	int number{};
	int stories{};
	int room_per_story{};
};

int main()
{
	#// Array of struct
	std::array<House, 3> houses{};
	houses[0] = { 14, 3, 30 };
	houses[1] = { 14, 3, 10 };
	houses[2] = { 15, 3, 40 };

	#// Other way to initialize array of struct
	std::array<House, 3> houses2{
		{
			{14, 3, 30},
			{14, 3, 10},
			{15, 3, 40},
		}
	};

	return 0;
}

```

## Introduction to std::vector

`std::vector` provides dynamic array functionality that handles its own memory management. We can create an array that have its length set at *run-time*, without using `new` and `delete`.

We use `std::vector` from header `vector`.

```{r std_vector_declaration}

#include <iostream>
#include <cstddef>
#include <vector>

int main()
{
	std::vector<int> v1;
	std::vector<int> v2 = { 9, 7, 5, 3, 1 };
	std::vector<int> v3{ 9, 7, 5, 3, 1 };
	
	#// From C++17:
	std::vector v4{9, 7, 5, 3, 1};
    
    #// Declare a vector size
    std::vector<TYPE> v6(vector_size);

	int vec_length{};
	std::cout << "Enter the vector's length: ";
	std::cin >> vec_length;

	std::vector<int> v5(vec_length);

	for (int index{ 0 }; index < vec_length; ++index)
	{
		std::cout << "Enter value #" << index + 1 << ": ";
		std::cin >> v5.at(index);
	}

	return 0;
}
```

We use operator `[]` and also function `at()` to access vector's elements.

```{r vector_assignment_value}

#// Assign value to vector's element
v4[1] = 2;
v4.at(3) = 4;

```

Built-in dynamics array does not know its length they are pointing to, `std::vector` keeps track of its length and can extract from `size()`. Notice that `size()` always returns object type `size_type`, full type `std::vector<int>::size_type`, which is an unsigned integer.

We can resize a vector by `resize()` function:

```{r vector_resize}

v4.resize(6);
```

## Introduction to iterators

An **iterator** is an object designed to traverse through a *container*, providing *access to each element* along the way.

#### Pointer as an iterator

The simplest kind of iterators is a pointer that work for data stored sequentially. We can use the pointer and pointer arithmetic to access the element and use in loops.

The `std::array` provides functions `begin()` and `end()` to access the pointer to the begin and end of an array.

Here is an example code:

```{r iterator_pointer_array}

#//Pointer as an iterators

std::array arr{ 1, 3, 4, 7, 8, 5, 9 };	

std::cout << "Use pointer: \n";
auto begin{ arr.begin()};
auto end{ arr.end()};

for (auto ptr{ begin }; ptr != end; ++ptr)
{
	std::cout << *ptr << ' ';
}

std::cout << '\n';

#// Use the iterator header

begin = std::begin(arr);
end = std::end(arr);

```

#### Invalidated iterators

If iterated elements are deleted or changed the address, the iterators to that element is **invalidated**; this iterator has undefined behaviors:

```{r iterator_invalidated}

	#// Invalidated iterators
	std::vector v{ 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
	auto it{ v.begin() };
	++it;
	std::cout << *it << '\n';
	v.erase(it);	#// ecrease element currently being iterated over

	++it;	#// undefined behavior
	std::cout << *it << '\n'; 

```

## Introduction to standard library algorithm

Header `algorithm` contains the functions help us work with data efficiently and safely. 

### `std::find` to find an element by a value

The function takes three parameters: an iterator to the starting element, an iterator to the end of element, and the value to search for.

`std::find` returns a pointer to the element found.

For example:

```{r std_find}

#include <iostream>
#include <array>
#include <algorithm>

void handle_cin_fail()
{
		std::cin.clear();
		std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

int get_input()
{
	int input{};
	std::cin >> input;

	while (std::cin.fail())
	{
		handle_cin_fail();

		std::cout << "Invalid value. Enter again: ";
		std::cin >> input;
	}

	std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

	return input;
}

bool confirm()
{
	char c{};
	std::cin >> c;
	std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

	switch (c)
	{
	case 'y':
		return true;
	case 'n':
		return false;
	default:
		std::cerr << "Invalid response!";
		std::abort();
	}
}


int main()
{
	#// This program such a value in an array and replace it by a user's value
	std::array arr{ 13, 20, 25, 32, 100, 56, 30, 14, 32 };

	int search{};
	int replace{};

	while (true)
	{
		std::cout << "Please enter the value which you want to search, and then a new replaced value: ";
		search = get_input();
		replace = get_input();

		std::cout << "Your search value: " << search << '\n';
		std::cout << "Replace by: " << replace << '\n';

		std::cout << "Do you confirm? (y or n): ";
		bool con{ confirm() };
		if (con)
			break;
		else
		{
			std::cout << "You chose 'n', do you want to re-enter? (y or n): ";
			con = confirm();
			if (!con)
			{
				std::cout << "You decided to end. Thank you! Exiting...\n";
				break;
			}
				
		}
	}

	auto found{ std::find(arr.begin(), arr.end(), search) };

	if (found == arr.end())
	{
		std::cout << "Could not find " << search << " in the array.\n";
	}
	else
	{
		*found = replace;
	}

	for (int i : arr)
	{
		std::cout << i << ' ';
	}

	std::cout << '\n';

	return 0;
}
```

### `std::find_if` to find an element that matches some condition

This function finds the element that return true in a predicate function. There are 3 parameters in this function: the start position, the end position, and a `bool` function.

Here is an example:

```{r std_find_if}

#include <algorithm>
#include <array>
#include <iostream>
#include <string>
#include <string_view>

bool str_exit(const std::string_view str)
{
	return (str.find("nut") != std::string_view::npos);
}

int main()
{
	std::array<std::string_view, 5> str{ "apple", "banananut", "walnut", "lemon" };

	#//std::string str_chose{};
	#//std::cout << "What string do you want to find?: ";
	#//std::cin >> str_chose;

	auto found{ std::find_if(str.begin(), str.end(), str_exit) };

	if (found == str.end())
	{
		std::cout << "Cannot find your string\n";
	}
	else
	{
		std::cout << "Found: " << *found << '\n';
	}

	return 0;
}
```

### Using `std::for_each` to do something to all elements of a container

`std::for_each` takes a list as input and applies a *custom* function to every element.

Here is an example:

```{r}

void double_number(int& i)
{
	i *= 2;
}

int main()
{
	#// std::for_each
	std::array arr{ 1, 2, 3 };
	std::for_each(arr.begin(), arr.end(), double_number);

	for (auto i : arr)
	{
		std::cout << i << ' ';
	}

	std::cout << '\n';

	return 0;
}
```

Here is chapter's summary: <https://www.learncpp.com/cpp-tutorial/chapter-11-comprehensive-quiz/>.

## Further from the exercises

### Using name alias for non-fundamental data type

Here is the code example:

```{r name_alias}

struct Student
{
    std::string name{};
    double grade{};
}

using Students = std::vector<Student>;

enum Item_types
{
    health,
    torchs,
    arrows,
    max_numbers,
};

using Items = std::array<Item_types, max_numbers>
```

When use for-each loop with `struct` data type, we can access its member

```{r for_each}

for(auto& student: Students)
{
    std::cin >> student.name;
    std::cin >> student.grade;
}
```

* Remember to avoid the **off-by-one** error when use loop for array.

* Cannot change value of x: `const int* ptr{&x}`

* If `length` is not a compile-time constant, we cannot define `int temp[length]{}`. Ex: length is a parameter in a function. We can use `std::vector`.
